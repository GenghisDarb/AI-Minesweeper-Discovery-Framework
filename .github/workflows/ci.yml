name: CI

on:
  push:
  pull_request:

permissions:
  contents: read
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Install dependencies
        run: |
          pip install -e .[dev]
      - name: Lint with ruff
        run: ruff check src tests
      - name: Install coverage tools
        run: pip install coverage pytest-cov
      - name: Run tests with coverage
        run: |
          coverage run -m pytest
          coverage xml
      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}  # Not needed for public repos
          files: coverage.xml
          flags: unittests
          name: codecov-ai-minesweeper
      - name: Enforce coverage thresholds
        run: pytest --cov=src --cov-fail-under=90 --cov-report=term-missing
      - name: Run new unit tests
        run: |
          pytest tests/test_primes_chi.py
          pytest tests/test_phase_lock_phi.py
      - name: Run solver tests
        run: pytest tests/test_solver_basic.py
      - name: Run periodic table tests
        run: pytest tests/test_periodic_table.py
      - name: Run meta-cell confidence tests
        run: pytest tests/test_beta_confidence.py tests/test_confidence_policy.py tests/test_ui_widgets.py
      - name: Run tests
        run: |
          pytest --cov=ai_minesweeper --cov-report=xml

      - name: Fail if coverage <85
        run: |
          python - <<'PY'
          import sys, xml.etree.ElementTree as ET
          cov = float(ET.parse('coverage.xml').getroot().attrib['line-rate'])*100
          print(f"coverage={cov:.1f}%")
          sys.exit(0 if cov >= 85 else 1)
          PY

  streamlit-smoke-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Install dependencies
        run: |
          pip install -e .[dev]
      - name: Streamlit smoke test
        run: |
          streamlit run streamlit_app.py --server.headless true &
          for i in {1..15}; do
            if curl -sSf http://localhost:8501/ > /dev/null; then
              echo "Streamlit server is ready!"
              break
            fi
            echo "Waiting for Streamlit server to start..."
            sleep 1
          done
          if ! curl -sSf http://localhost:8501/ > /dev/null; then
            echo "Streamlit server failed to start within 15 seconds."
            exit 1
          fi

  deploy:
    needs: [test, streamlit-smoke-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: pip install .[dev]
      - name: Build static Streamlit app
        run: |
          pip install streamlit-static
          streamlit-static export streamlit_app.py --output-dir dist
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist

  build-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Pandoc
        run: sudo apt-get install -y pandoc
      - name: Install pdflatex
        run: |
          sudo apt-get update
          sudo apt-get install -y texlive-latex-base texlive-fonts-recommended texlive-fonts-extra texlive-latex-extra
      - name: Build white-paper
        run: python scripts/build_whitepage.py
